rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	// Authenitcated users can read their own record, others only if adventure is public
  	// Authenitcated users can only write their own record
    match /adventures/{adventureId} {
    	allow read: if canReadJournal(resource.data);
  		allow create, update: if request.auth != null && request.auth.uid == request.resource.data.uid;
        allow delete: if request.auth != null && request.auth.uid == resource.data.uid;      
	}
    
    // Authenticated users can only read their own record
    // Authenticated users can only write their own record
	match /users/{uid} {
  		allow write: if request.auth != null && request.auth.uid == uid;
      	allow read: if true; // only public non sensitive data at root of user doc
      
		// Only authenticated users can read/write their own private data
		match /private/{uid} {
			allow read, write: if request.auth != null && request.auth.uid == uid;
		}
	}
 
    // Authenticated users can read/write their own records
    match /user-settings/{uid} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
    }
    
    // Authenticated users can read their own records
    // Public can read any checkins from adventures that have been marked as public
    // Authenticated users write their own records
	match /check-ins/{id} {
  		allow read: if (request.auth != null && request.auth.uid == resource.data.uid) || get(/databases/$(database)/documents/adventures/$(resource.data.adventureId)).data.public == true;
  		allow delete, update: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
		}
        
    // Public can read all records
    // Private write - these are internal records that can only be updated via the console
	match /map-layers/{maplayer} {
  		allow read: if true;
  		allow write: if false;
		}
        
    // Public	can read all records
    // Private write - these are internal records that can only be updated via the console (temporarily add write for admins)
	match /trails/{trail} {
  		allow read: if true;
  		allow write: if request.auth.token.admin == true;
		}
    
    // Public can read all lookup types
    // Admin write - e.g. for setting up new database with default records
    match /lookups/{types}/{document=**} {
  		allow read: if true;
		allow write: if request.auth.token.admin == true;
  	}
   
   // Comments
  	match /comments/{id} {
    	// Can write your own comments (TODO - only on friend or public stuff)
    	allow create, update: if (request.auth != null) && request.resource.data.uid == request.auth.uid
      
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
      // Anyone can read (TODO - only friend/public stuff)
      allow read: if (request.auth != null)
    }
    
   // Friends
  	match /reactions/{id} {
    	// Can write your own reaction (TODO - only on friend or public stuff)
    	allow create, update: if (request.auth != null) && request.resource.data.uid == request.auth.uid
      
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
      // Anyone can read (TODO - only friend/public stuff)
      allow read: if (request.auth != null)
    }
    
   // Friends
  	match /friends/{uidOwner} {
    	// Users can read/write their own friend lists
  		allow read, write: if (request.auth != null && request.auth.uid == uidOwner);
      
      // All authenticated users to request to be a friend of anyone
      allow write: if (request.auth != null) && request.resource.data.status == "pending"
		}
    
   // Friends subcollection
    match /friends/{uidOwner}/userFriends/{uidFriend} {
      // The owner can manage their friends list
      allow read, write: if (request.auth != null && request.auth.uid == uidOwner);

      // A friend can see their own friend record (e.g., for status updates)
      allow read: if request.auth.uid == uidFriend;
    }
    
    // Returns whether the requestor is an approved friend of the owner
    function isFriend(uidOwner) {
      return exists(
        /databases/$(database)/documents/friends/$(uidOwner)/userFriends/$(request.auth.uid)
      )
      && get(
        /databases/$(database)/documents/friends/$(uidOwner)/userFriends/$(request.auth.uid)
      ).data.status == "approved";
    }
    
    // Returns whether the requesting user can read a journal (adventure)
    function canReadJournal(journal) {
      return
      // anyone can read public adventures (do not need to be logged in)
      journal.visibility == "everyone" ||
        (
            // for logged in users
            request.auth != null &&
            
            (
                // Owner can always read their own journal
                journal.uid == request.auth.uid ||

                // Or friends if only visible to approved friends
                (journal.visibility == "friendsOnly" && isFriend(journal.uid))
            )
        );
    }
  }
}	
